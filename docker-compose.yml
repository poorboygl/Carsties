version: '3.9'
services:
  db_PostgreSQL:
    container_name: auctions_PostgreSQL
    image: postgres:16
    #mem_limit: 256m
    #cpu_shares: 768
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "auctions", "-U", "root" ]
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: auctions
      #PGTZ: Asia/Ho_Chi_Minh
      #TZ: Asia/Ho_Chi_Minh
      #volumes:
      #- /volume1/docker/postgres/postgresql:/var/lib/postgresql@17/data:rw
      #- /volume1/docker/postgres/log:/var/log/postgresql:rw
    ports:
      - 2665:5432
    restart: on-failure:5
    command: [ "postgres", "-c", "log_statement=all", "-c", "logging_collector=on", "-c", "log_directory=/var/log/postgresql", "-c", "log_filename=postgresql-%Y-%m-%d_%H%M%S.log", "-c", "log_timezone='GMT-6'" ]
    networks:
      - network

  pgadmin_PostgreSQL:
    container_name: auctions_PostgreSQL_pgAdmin
    image: dpage/pgadmin4:latest
    #mem_limit: 256m
    #cpu_shares: 768
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5050
    environment:
      PGADMIN_DEFAULT_EMAIL: nguyenquocvu.16494@gmail.com
      PGADMIN_DEFAULT_PASSWORD: postgrespw
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - 2660:5050
      #volumes:
      #- /volume1/docker/postgres/postgresadmin:/var/lib/pgadmin:rw
    restart: on-failure:5
    depends_on:
      - db_PostgreSQL
    networks:
      - network

  rabbitmq:
    image: rabbitmq:management
    container_name: auctions_rabbitmq
    #mem_limit: 2g
    #cpu_shares: 768
    security_opt:
      - no-new-privileges:true
    restart: on-failure:5
    #volumes:
    #- /volume1/docker/rabbitmq:/var/lib/rabbitmq:rw
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmqpw
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - network

  mongodb_auctions:
    container_name: auctions_mongodb
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopw
    ports:
      - 27017:27017
      #volumes:
      #- /volume1/docker/mongodb/data:/data/db
    networks:
      - network

  auctionservice:
    container_name: AuctionService
    build:
      context: .
      dockerfile: src/AuctionService/Dockerfile
    ports:
      - "7001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Rabbitmq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Server=db_PostgreSQL;User Id=root;Password=postgrespw;Database=auctions
      - IdentityServiceUrl=http://identityservice
    depends_on:
      - db_PostgreSQL
      - rabbitmq
    networks:
      - network

  searchservice:
    container_name: SearchService
    build:
      context: .
      dockerfile: src/SearchService/Dockerfile
    ports:
      - "7002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Rabbitmq__Host=rabbitmq
      - ConnectionStrings__MongoDbConnection=mongodb://root:mongopw@mongodb_auctions
      - AuctionServiceUrl=http://auctionservice
    depends_on:
      - db_PostgreSQL
      - rabbitmq
    networks:
      - network

  identityservice:
    container_name: IdentityService
    build:
      context: .
      dockerfile: src/IdentityService/Dockerfile
    ports:
      - "5601:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=db_PostgreSQL;User Id=root;Password=postgrespw;Database=identity
    depends_on:
      - db_PostgreSQL
    networks:
      - network

  gatewayservice:
    container_name: GatewayService
    build:
      context: .
      dockerfile: src/GatewayService/Dockerfile
    ports:
      - "6001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
    networks:
      - network

networks:
  network:
    driver: bridge
